generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  password   String?
  createdAt  DateTime  @default(now())
  avatar     String?
  googleId   String?   @unique
  updatedAt  DateTime  @updatedAt
  bio        String?
  isVerified Boolean   @default(false)
  role       UserRole  @default(USER)
  comments   Comment[]
  following  Follow[]  @relation("follower")
  followers  Follow[]  @relation("following")
  likes      Like[]
  posts      Post[]
  favorites  Movie[]   @relation("UserFavorites")
  watchlist  Movie[]   @relation("UserWatchlist")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  authorId  String
  images    String[]
  movieId   String?
  rating    Int?      @default(0)
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  movie     Movie?    @relation(fields: [movieId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(uuid())
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([authorId, postId])
}

model Movie {
  id          String   @id @default(uuid())
  tmdbId      String   @unique
  title       String
  posterPath  String?
  overview    String
  releaseDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
  favoritedBy User[]   @relation("UserFavorites")
  watchedBy   User[]   @relation("UserWatchlist")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Equipment {
  id          String   @id @default(cuid())
  name        String
  category    String
  location    String
  description String
  price       String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model People {
  id          String   @id @default(uuid())
  name        String
  location    String
  description String
  role        String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}
