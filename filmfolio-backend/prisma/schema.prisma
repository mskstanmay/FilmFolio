generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  password     String?
  googleId     String?   @unique
  avatar       String?
  bio          String?   @db.Text
  role         UserRole  @default(USER)
  isVerified   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  followers    Follow[]  @relation("following")
  following    Follow[]  @relation("follower")
  watchlist    Movie[]   @relation("UserWatchlist")
  favorites    Movie[]   @relation("UserFavorites")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String    @db.Text
  authorId  String
  movieId   String?
  images    String[]
  rating    Int?      @default(0)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  movie     Movie?    @relation(fields: [movieId], references: [id])
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  authorId  String
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  authorId  String
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([authorId, postId])
}

model Movie {
  id          String   @id @default(uuid())
  tmdbId      String   @unique
  title       String
  posterPath  String?
  overview    String   @db.Text
  releaseDate DateTime
  posts       Post[]
  watchedBy   User[]   @relation("UserWatchlist")
  favoritedBy User[]   @relation("UserFavorites")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

